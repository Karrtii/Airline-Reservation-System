@page "/flightresult"
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@
@using Client.Model;
@using Client.Data;
@using Client.Security
@inject NavigationManager navigationManager
@inject IFlightInfoService flightinfoservice
@inject SecurityService securityService
@inject CustomDataProtection customDataProtection
@attribute [Authorize]


<div class="container" style="margin-top:120px;">
    <div class="row bg-light">
        <div class=""></div>
        <div class="col-12 d-flex justify-content-between align-items-center" style="height:60px">
            <h2>
                Results:
                @if (flightInfos == null)
                {
                    @results
                }
                else
                {
                    @flightInfos.Count
                }
            </h2>
            <select>
                <option>Cheapest</option>
                <option>Longest</option>
            </select>
        </div>
        <div class="col-12 d-flex align-items-center p-3" id="resultsArea">
            <ul class="list-group">
                @if (flightInfos == null)
                {
                    <p class="pt-5">
                        <em>List is loading...</em>
                    </p>
                }
                else if (!flightInfos.Any())
                {
                    <p class="pt-5">
                        The file is empty, no list displayed...
                    </p>
                }
                else
                {
                    foreach (FlightInfo info in flightInfos)
                    {
                        <li class="list-group-item d-flex align-items-center text-center">
                            <div>
                                <i class="fas fa-plane-departure mr-2"></i>

                            </div>
                            <div style="display:none;">
                                <p>@info.flight.id</p>
                                <p>@{int a = CalculatePrice(info.flight.numberOfSeatRemaining, info.arrival.arrivalTime, info.departure.departureTime);} </p>
                            </div>
                            <div>
                                <span>@info.departure.departureTime.ToString("h: mm tt")</span>
                                <br />

                                <span>@info.departure.departureTime.ToString("dddd, dd MMMM yyyy")</span>
                            </div>
                            <div>
                                <span>@info.departure.fromWhere</span>
                            </div>

                            <div>
                                <span>@calculateTime(info.arrival.arrivalTime, info.departure.departureTime)</span>
                                <br />
                                <span>▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬</span>
                            </div>
                            <div>
                                <span>@info.arrival.fromWhere</span>

                            </div>
                            <div>
                                <span>@info.arrival.arrivalTime.ToString("h: mm tt")</span>
                                <br />

                                <span>@info.arrival.arrivalTime.ToString("dddd, dd MMMM yyyy")</span>
                            </div>
                            <div>
                                <span>@a DKK</span>
                                <br />
                                <button class="btn btn-primary btn-rounded" @onclick="@(e => BookThisFlight(info.flight.id,a))">Book</button>
                            </div>
                        </li>
                    }
                }
            </ul>
        </div>
    </div>
</div>




@code {
    private string originOfFlight = "";
    private string destinationOfFlight = "";
    private DateTime departure;
    private DateTime departureBack;
    private int numbOfAdults;
    private int numOfChildren;
    private List<FlightInfo> flightInfos;
    private int results = 0;
    private bool returning;

    protected async override Task OnInitializedAsync()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(securityService.originFlightResult, out var origin))
        {
            originOfFlight = customDataProtection.Decode(origin.First());
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(securityService.destinationFlightResult, out var destination))
        {
            destinationOfFlight = customDataProtection.Decode(destination.First());
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(securityService.wishedDepartureFlightResult, out var wishedDeparture))
        {
            departure = Convert.ToDateTime(customDataProtection.Decode(wishedDeparture.First()));
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(securityService.adultsFlightResult, out var adults))
        {
            numbOfAdults = Int32.Parse(customDataProtection.Decode(adults.First()));
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(securityService.childrenFlightResult, out var children))
        {
            numOfChildren = Int32.Parse(customDataProtection.Decode(children.First()));
        }

        flightInfos = await flightinfoservice.getFlights(originOfFlight, destinationOfFlight, (numbOfAdults + numOfChildren), departure, departureBack);

        CheckReturning();
    }

    private void CheckReturning()
    {
        if (departureBack.Year == 0001)
        {
            returning = false;
        }
        else
        {
            returning = true;
        }
    }

    private string calculateTime(DateTime arrival, DateTime departure)
    {
        DateTime result = arrival.Subtract(departure.TimeOfDay);
        return result.ToString("H:mm");
    }

    private void BookThisFlight(int flightID, int price)
    {
        string flightIDString = customDataProtection.Encode("flightID");
        string adultsString = customDataProtection.Encode("adults");
        string childrenString = customDataProtection.Encode("children");
        string priceString = customDataProtection.Encode("price");
        string returningString = customDataProtection.Encode("returning");

        securityService.flightIDPickedFlight = flightIDString;
        securityService.adultPickedFlight = adultsString;
        securityService.childrenPickedFlight = childrenString;
        securityService.pricePickedFlight = priceString;
        securityService.returningPickedFlight = returningString;

        navigationManager.NavigateTo("/pickedflight?"+flightIDString+"=" +customDataProtection.Encode(flightID.ToString()) + "&"+adultsString+"=" + customDataProtection.Encode(numbOfAdults.ToString()) + "&"+childrenString+"=" + customDataProtection.Encode(numOfChildren.ToString()) + "&"+priceString+"=" + customDataProtection.Encode(price.ToString()) + "&"+returningString+"=" + customDataProtection.Encode(returning.ToString()));
    }

    private int CalculatePrice(int remainingSeats, DateTime arrival, DateTime departure)
    {
        DateTime result = arrival.Subtract(departure.TimeOfDay);
        double minutes = result.TimeOfDay.TotalMinutes;
        double calculation;
        Random rand = new Random();
        int addedPrice = rand.Next(100, 180);
        if (remainingSeats >= 50)
        {
            calculation = (minutes * 0.05) * remainingSeats;
        }
        else
        {
            calculation = (minutes * 0.05) * remainingSeats + addedPrice;
        }
        return Convert.ToInt32(Math.Ceiling(calculation));
    }
}
