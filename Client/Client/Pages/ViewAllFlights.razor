@page "/viewallflights"
@using Client.Model
@using Client.Data
@using System.Net
@using Client.Security
@inject IPassengerService passengerService
@inject IBookingService bookingService
@inject IFlightInfoService flightInfoService
@inject SecurityService  securityService
@inject NavigationManager NavigationManager
@inject CustomDataProtection customDataProtection
@inject IFlightService flightService
@attribute [Authorize]

<div class="container mt-5">
    <div class="row justify-content-center align-content-center align-items-center">
        <div class="col-12 text-center mb-5">
            <h2 class="display-4" style="        color: rgba(239,71,111,1);"> Upcoming flights</h2>
        </div>

        <div class="col-12 col-md-8 d-flex align-items-end justify-content-between px-3">
            <h3 style="padding-left:40px;">Flight</h3>
            <h3>Status</h3>
            <button class="btn btn-primary btn-rounded invisible"> Delay Flight</button>
            <button class="btn btn-primary btn-rounded invisible"> Delay Flight</button>

        </div>


        @if (myFlights == null)
        {
            <p>Loading...</p>
        }
        else if (!myFlights.Any())
        {
            <div class="col-12 col-md-8 d-flex overview-card empty  text-center justify-content-center p-3 align-items-center text-center">
                <span>You don't have any flights booked</span>
            </div>
        }
        else
        {
            foreach (FlightInfo f in myFlights)
            {
    <div class="col-12 col-md-8 d-flex rounded border p-3 align-items-center my-3 justify-content-around">
        <div>

            <span>@f.departure.fromWhere</span>
            <span>-</span>
            <span>@f.arrival.fromWhere</span>

        </div>
        <span>@f.flight.status</span>

        @if (f.flight.status.Equals("finished") || f.flight.status.Equals("cancelled"))
        {
            <button class="btn btn-primary btn-rounded invisible" @onclick="() => CancelFlight(f.flight.id)"> Cancel Flight</button>
        }
        else
        {
            <button class="btn btn-primary btn-rounded " @onclick="() => CancelFlight(f.flight.id)"> Cancel Flight</button>
        }

        @if (f.flight.status.Equals("finished") || f.flight.status.Equals("cancelled") || f.flight.status.Equals("delayed"))
        {
            <button class="btn btn-primary btn-rounded invisible" @onclick="()=>DelayFlight(f.flight.id)"> Delay Flight</button>
        }
        else
        {
            <button class="btn btn-primary btn-rounded" @onclick="()=>DelayFlight(f.flight.id)"> Delay Flight</button>
        }
    </div>
            }
        }
    </div>
</div>

@code {
    private List<Passenger> myPassengers = new List<Passenger>();
    private List<FlightInfo> myFlights = new List<FlightInfo>();

    protected async override Task OnInitializedAsync()
    {
        myFlights = await flightInfoService.getFlightInfos();
    }

    private async Task CancelFlight(int flightInfoID)
    {
        NavigationManager.NavigateTo("/cancelFlight?ID=" + flightInfoID);

    }

    private void DelayFlight(int flightInfoID)
    {
        NavigationManager.NavigateTo("/delayFlight?ID=" + flightInfoID);
    }
}
